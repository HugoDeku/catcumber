<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="content-type" content="text/html; charset=windows-1252">    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Catcumber</title>
    <script type="text/javascript" src="gl-matrix.js"></script>
    <script type="text/javascript" src="game-utils.js"></script>
    <script type="text/javascript" src="modelObj.js"></script>

    <script id="model-vs" type="x-shader/x-vertex">#version 300 es
        // *** le vertex shader *** 
        layout(location=0) in vec3 aVertexPosition;
        layout(location=1) in vec3 aVertexNormal;
        
        uniform mat4 uModelMatrix;
        uniform mat4 uViewMatrix;
        uniform mat4 uProjMatrix;
        uniform float timer;
        
        out vec3 vNormal;
        
        void main(void) {
            // projection de la position
        vec3 p = aVertexPosition;
  
        // exemple de modification de la hauteur du modèle avec un simple timer
        // bien pour les petits effets, mais si possible modifier directement la
        // matrice model en amont (dans setParameters du fichier modelObj)
        //p.z += 3.0*sin(timer*10.0);
        
            gl_Position = uProjMatrix * uViewMatrix * uModelMatrix * vec4(p, 1.0);
            vNormal = mat3(inverse(transpose(uViewMatrix * uModelMatrix)))*normalize(aVertexNormal);
        }
      </script>
  
      <script id="model-fs" type="x-shader/x-fragment">#version 300 es
        // *** le fragment shader ***
        precision mediump float; // precision des nombres flottant
        
        in vec3 vNormal;
        out vec4 outColor;
        
        void main(void) {
            // la normale (en tout point)
        vec3 n = normalize(vNormal);
  
        // une direction de lumière quelconque
        vec3 l = normalize(vec3(-1.0,0.0,1.0));
  
        // une couleur (ex. rouge)
        vec3 Kd = vec3(1.0,1.0,1.0);
  
        // un éclairage simple
        vec3 diff = Kd*max(dot(n,l),0.0);
  
        // que l'on affiche en sortie
            outColor = vec4(diff,1.0);
        }
      </script>

    <script type="text/javascript">

        var currentlyPressedKeys = {};
        var cat;

        function handleKeyDown(event) {
            currentlyPressedKeys[event.keyCode] = true;
        }


        function handleKeyUp(event) {
            currentlyPressedKeys[event.keyCode] = false;
        }

        function drawScene(){
            gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);

            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            gl.useProgram(cat.shader());
            cat.sendUniformVariables();
            cat.draw();
        }

        function handleKeys(){

        }

        function tick() {
                requestAnimFrame(tick);
                handleKeys();
                drawScene();
            }

        function webGLStart(){
            var canvas = document.getElementById("catcumber");
            initGL(canvas);

            initModelShader();


            cat = new Model('./ressources/kitten.obj');

            // la couleur de fond sera grise foncée
            gl.clearColor(0.3, 0.6, 0.3, 1.0);

            // active le test de profondeur 
            gl.enable(gl.DEPTH_TEST);

            // fonction de mélange utilisée pour la transparence
            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);      

            document.onkeydown = handleKeyDown;
            document.onkeyup = handleKeyUp;

            tick();
        }
    </script>
</head>
<body onload="webGLStart();">
    <canvas id="catcumber" style="border: none;" width="1020" height="800"></canvas>
</body>
</html>